; Hardware loaders

; Indices into the tables.
.def dev_lem1802, 0
.def dev_keyboard, 1
.def dev_disk, 2
.def dev_timer, 3

.def _dev_table_number, 0
.def _dev_table_id, 1
.def _dev_table_manufacturer, 3
.def _dev_table_width, 5

:_device_ids .dat -1, -1, -1, -1
:_device_ids_end


:_dev_table
; LEM1802: ID 0x734df615 Maker 0x1c6c8b36 (TC ID)
.dat dev_lem1802, 0x734d, 0xf615, 0x1c6c, 0x8b36
; LEM1802: ID 0x7349f615 Maker 0x1c6c8b36 (Notch ID)
.dat dev_lem1802, 0x7348, 0xf615, 0x1c6c, 0x8b36

; Keyboard: ID 0x30c17406 Maker 0 (generic, TC ID)
.dat dev_keyboard, 0x30c1, 0x7406, 0, 0
; Keyboard: ID 0x30cf7406 Maker 0 (generic, Notch ID)
.dat dev_keyboard, 0x30cf, 0x7406, 0, 0

; Floppy: ID 0x4fd524c5 Maker 0x1eb37e91 (Mackapar 3.5" floppy, TC ID)
.dat dev_disk, 0x4fd5, 0x24c5, 0x1eb3, 0x7e91

; Timer: ID 0x12d0b402 Maker 0x1c6c8b36 (NYA Elektriska)
.dat dev_timer, 0x12d0, 0xb402, 0x1c6c, 0x8b36
; Timer: ID 0x12d1b402 Maker 0x1c6c8b36 (NYA Elektriska)
.dat dev_timer, 0x12d1, 0xb402, 0x1c6c, 0x8b36
:_dev_table_end

; Looks up devices and populates their numbers.
:init_hardware
pshw {x}
hwnw x

:init_hardware_loop
bzrdw x, init_hardware_loop_end
setl a, x
jsrw _search_dev_table
setl pc, init_hardware_loop

:init_hardware_loop_end
popw {x, pc}


:_search_dev_table ; (device number) -> void
pshw {a, x, y, z}
hwqw a ; A is ID, C version, X manufacturer

setl z, _dev_table
:_search_dev_table_loop
; Check ID
brnl a, [z + _dev_table_id], _search_dev_table_no_match

; If the manufacturer in the table is 0, it's generic and can't be trusted,
; so we use ID only.
setl y, [z + _dev_table_manufacturer]
brel y, 0, _search_dev_table_match

; There's a real manufacturer value, so check it.
brnl x, y, _search_dev_table_no_match
; Still here - a match.

:_search_dev_table_match
; The device number was pushed.
setl a, pop
clrl b
setw b, [z + _dev_table_number]
setw [b + _device_ids], a
setl pc, _search_dev_table_done

:_search_dev_table_no_match
addl z, _dev_table_width
brll z, _dev_table_end, _search_dev_table_loop

; Otherwise, bail
addl sp, 2 ; Popping the saved A.

:_search_dev_table_done
popw {x, y, z, pc}


:get_device ; (index into _dev_table) -> device number (-1 if not found)
setw a, [a + _device_ids]
setl pc, pop


